// Retain cycle class - trailing closure

class Person {
    var closure: () -> () = { }
    
    init() {
        print("Object has been created.")
    }
    deinit {
        print("Object DEINITED.")
    }
}

// [capture list] - captures COPY of value
// since person stores Pointer to Person() object
// we capture strong [person] copy and creating strong second pointer
// to solve create [weak person] pointer so it doesn't count by ARC

do {
    print("Creating Object..")
    let person = Person()
    person.closure = { [weak person] in
        print("Instance is = \(person!)") // print accepts value as copy, so it creates strong refernce by default
    }
    person.closure()
}

// class - closure Retain cycle example through func
class Pet {
    var name: String
    var closure: () -> () = { }
    
    init(name: String) {
        self.name = name
    }
    
    deinit {
        print("Deinited")
    }
    // Функция ссылаеться на класс через self. что создаст stron ссылку на класс
    func teachClosureToSayName() {
        closure = { [weak self] in
            print(self?.name)
        }
    }
}


do {
    let pet = Pet(name: "Vinston")
    pet.closure
    pet.teachClosureToSayName()
}

// EXPLANATION WITH FUNC THAT CREATES CLOSURE , THAT CAPTURES VALUE self
class Person {
    var name: String = "Flert"
    var closure: () -> () = { }
    
    func setClosure() {
        closure = { [self] in      // захватил так же если trailing closure [person]
            print("\(self.name)")  // self я обращаюсь к созданому экземпляру
        }
    }
    
    deinit {
        print("Person deinited!")
    }
}


var person: Person? = Person()
person?.setClosure()

person = nil

// IT DOESNT DEINIT 
// NEED [weak self] to create weak reference inside closure that captures instance of Person


1. The setClosure method is called.
2. Inside setClosure, a closure is created, and it captures self (the instance of the Person class) strongly by default.
3. The closure is assigned to the closure property of the Person instance.
